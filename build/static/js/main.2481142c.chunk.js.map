{"version":3,"sources":["contexts/InstallmentContext.js","components/calculator/Calculator.js","components/displayInformation/DisplayInformation.js","App.js","serviceWorker.js","index.js"],"names":["InstallmentContext","React","createContext","InstallmentConsumer","Consumer","InstallmentProvider","children","useState","monthlyInstallment","installmentData","setInstallmentData","installmentContextValue","getInstallmentData","url","a","fetch","response","json","jsonData","data","Provider","value","Calculator","amount","setAmount","duration","setDuration","installmentContext","useContext","onSubmit","event","URL","search","URLSearchParams","preventDefault","className","htmlFor","type","id","onChange","e","target","required","DisplayInformation","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gWAEMA,EAAqBC,IAAMC,cAAc,MAClCC,EAAsBH,EAAmBI,SAE/C,SAASC,EAAT,GAA0C,IAAZC,EAAW,EAAXA,SAAW,EACEL,IAAMM,SAAS,CAACC,mBAAoB,IADtC,mBACrCC,EADqC,KACpBC,EADoB,KAStCC,EAA0B,CAC5BC,mBAPoB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACEC,MAAMF,GADR,cACfG,EADe,gBAEEA,EAASC,OAFX,OAEfC,EAFe,OAGrBR,EAAmBQ,EAASC,MAHP,2CAAH,sDAQpBV,mBAGJ,OACI,kBAACT,EAAmBoB,SAApB,CAA6BC,MAAOV,GACxCL,GAKWN,QCqBAsB,G,MAxCI,WAAO,IAAD,EACKrB,IAAMM,SAAS,IADpB,mBAChBgB,EADgB,KACRC,EADQ,OAESvB,IAAMM,SAAS,IAFxB,mBAEhBkB,EAFgB,KAENC,EAFM,KAGjBC,EAAqB1B,IAAM2B,WAAW5B,GAoB1C,OACE,0BAAM6B,SAfO,SAACC,GAChB,IAAIjB,EAAM,IAAIkB,IAAI,qCAClBlB,EAAImB,OAAS,IAAIC,gBAAgB,CAC/B,OAAUV,EACV,SAAYE,IAEdK,EAAMI,iBAKNP,EAAmBf,mBAAmBC,IAIVsB,UAAU,2BAClC,yBAAKA,UAAU,mBACb,2BAAOC,QAAQ,UAAf,YACA,2BAAOC,KAAK,SAASC,GAAG,SAASC,SAAU,SAAAC,GAAMhB,EAAUgB,EAAEC,OAAOpB,QAASA,MAAOE,EAAQmB,UAAQ,KAEtG,yBAAKP,UAAU,mBACb,2BAAOC,QAAQ,YAAf,cACA,2BAAOC,KAAK,SAASC,GAAG,WAAWC,SAAU,SAAAC,GAAMd,EAAYc,EAAEC,OAAOpB,QAASA,MAAOI,EAAUiB,UAAQ,KAE5G,yBAAKP,UAAU,mBACb,4BAAQE,KAAK,UAAb,UCtBKM,G,MAZY,WACzB,OACE,kBAACxC,EAAD,MACG,gBAAEM,EAAF,EAAEA,gBAAF,OACE,yBAAK0B,UAAU,oBACZ,uDAA4B,2BAAI1B,GAAmBA,EAAgBD,mBAAvC,kBCiBzBoC,MAlBf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,KACV,kBAACxC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,YCPMyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2481142c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst InstallmentContext = React.createContext(null);\r\nexport const InstallmentConsumer = InstallmentContext.Consumer;\r\n\r\nexport function InstallmentProvider({children}) {\r\n    const [installmentData, setInstallmentData] = React.useState({monthlyInstallment: 0});\r\n\r\n    const getInstallmentData = async (url) => {\r\n          const response = await fetch(url);\r\n          const jsonData = await response.json();\r\n          setInstallmentData(jsonData.data);\r\n      };\r\n\r\n    const installmentContextValue = {\r\n        getInstallmentData,\r\n        installmentData\r\n    }\r\n\r\n    return (\r\n        <InstallmentContext.Provider value={installmentContextValue}>\r\n\t\t\t{children}\r\n\t\t</InstallmentContext.Provider>\r\n    );\r\n}\r\n\r\nexport default InstallmentContext;","import React from 'react';\r\nimport './Calculator.css';\r\nimport InstallmentContext from '../../contexts/InstallmentContext';\r\n\r\n/**\r\n * Calculator component\r\n */\r\nconst Calculator = () => {\r\n  const [amount, setAmount] = React.useState(\"\");\r\n  const [duration, setDuration] = React.useState(\"\");\r\n  const installmentContext = React.useContext(InstallmentContext);\r\n\r\n  /**\r\n   * Handler for submit event for calculator form\r\n   * @param {Event} event \r\n   */\r\n  const onSubmit = (event) => {\r\n    let url = new URL('https://api.myjson.com/bins/ta1sf');\r\n    url.search = new URLSearchParams({\r\n      'amount': amount,\r\n      'duration': duration\r\n    });\r\n    event.preventDefault();\r\n\r\n    /**\r\n     * Pass Url to aync data loader in context provider\r\n     */\r\n    installmentContext.getInstallmentData(url);\r\n  }\r\n\r\n    return (\r\n      <form onSubmit={onSubmit} className=\"calculator-widget panel\">\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"amount\">Amount: </label>\r\n          <input type=\"number\" id=\"amount\" onChange={e => {setAmount(e.target.value)}} value={amount} required/>\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"duration\">Duration: </label>\r\n          <input type=\"number\" id=\"duration\" onChange={e => {setDuration(e.target.value)}} value={duration} required/>\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <button type=\"submit\">Ok</button>\r\n        </div>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport './DisplayInformation.css';\r\nimport {InstallmentConsumer} from \"../../contexts/InstallmentContext\";\r\n\r\n/**\r\n * Display component to show monthly installment\r\n */\r\nconst DisplayInformation = () => {\r\n  return(\r\n    <InstallmentConsumer>\r\n      {({installmentData}) =>\r\n         <div className=\"information-area\">\r\n            <label>Monthly Installment: <b>{installmentData && installmentData.monthlyInstallment} &euro;</b></label>\r\n          </div>\r\n      }\r\n    </InstallmentConsumer>\r\n  ) \r\n}\r\n\r\nexport default DisplayInformation;\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport {InstallmentProvider} from \"./contexts/InstallmentContext\";\nimport Calculator from \"./components/calculator/Calculator\";\nimport DisplayInformation from \"./components/displayInformation/DisplayInformation\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <InstallmentProvider>\n              <Calculator />\n              <DisplayInformation />\n            </InstallmentProvider>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}